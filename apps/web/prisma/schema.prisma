// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  devices       UserDevice[]
  albums         Album[]
  pictures       Picture[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserDevice {
  id             String                @id @default(cuid())
  userId         String
  publicKey      String                @unique
  name           String
  lastLogin      DateTime?
  createdAt      DateTime              @default(now())
  isTrusted      Boolean               @default(false)
  updatedAt      DateTime              @updatedAt
  user           User                  @relation(fields: [userId], references: [id])
  challenges     UserDeviceChallenge[]
  sharedPictures SharedPicture[]
  sharedAlbums   SharedAlbum[]
}

model UserDeviceChallenge {
  id           String     @id @default(cuid())
  challenge    String
  userDeviceId String
  isValidated  Boolean    @default(false)
  expires      DateTime
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  userDevice   UserDevice @relation(fields: [userDeviceId], references: [id])
}

model Picture {
  id             String          @id @default(cuid())
  userId         String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  sharedPictures SharedPicture[]
  albums         Album[]
  owner          User            @relation(fields: [userId], references: [id])
}

model SharedPicture {
  id          String     @id @default(cuid())
  deviceId    String
  pictureId   String
  key         String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user_device UserDevice @relation(fields: [deviceId], references: [id])
  picture     Picture    @relation(fields: [pictureId], references: [id])

  @@unique([deviceId, pictureId])
}

model Album {
  id           String        @id @default(cuid())
  userId       String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  owner        User          @relation(fields: [userId], references: [id])
  sharedAlbums SharedAlbum[]
  pictures     Picture[]
}

model SharedAlbum {
  id           String     @id @default(cuid())
  deviceId     String
  albumId      String
  albumName    String
  user_device  UserDevice @relation(fields: [deviceId], references: [id])
  album        Album      @relation(fields: [albumId], references: [id])

  @@unique([deviceId, albumId])
}
